generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  fullName          String
  providerId        String         @unique
  avatarUrl         String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  deletedAt         DateTime?
  lastLoginAt       DateTime?
  phone             String?
  preferredLanguage String?
  role              UserRole       @default(INVESTOR)
  timezone          String?
  authProvider      AuthProvider
  auditLogs         AuditLogEntry[]
  client            Client?
  investor          Investor?
  kycRecord         KycRecord?
  notifications     Notification[]
  visits            Visit[]
  wallets           Wallet[]
  documents         Document[]
}

model Investor {
  id                 String       @id @default(uuid())
  userId             String       @unique
  nationality        String
  isVerified         Boolean      @default(false)
  verifiedAt         DateTime?
  verificationMethod String?
  dateOfBirth        DateTime?
  institutionName    String?
  vatNumber          String?
  phoneNumber        String?
  address            String?
  city               String?
  country            String?
  postalCode         String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  investments        Investment[]
  user               User         @relation(fields: [userId], references: [id])
  wallets            Wallet[]
}

model Wallet {
  id         String       @id @default(uuid())
  investorId String
  address    String       @unique
  blockchain Blockchain   @default(SEPOLIA)
  isVerified Boolean      @default(false)
  verifiedAt DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  userId     String?
  Investment Investment[]
  investor   Investor     @relation(fields: [investorId], references: [id])
  User       User?        @relation(fields: [userId], references: [id])
}

model Property {
  id                     String         @id @default(cuid())
  clientId               String
  title                  String
  description            String
  country                String
  city                   String
  tokenPrice             Decimal
  status                 PropertyStatus @default(DRAFT)
  isFeatured             Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  address                String
  apr                    Decimal
  imageUrls              String[]       @default([])
  irr                    Decimal
  minInvestment          Decimal
  tokenSymbol            String         @unique
  tokensAvailablePercent Decimal
  totalPrice             Decimal
  valueGrowth            Decimal
  investments            Investment[]
  client                 Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  token                  Token[]
  visits                 Visit[]
  documents              Document[]
}

model Token {
  id              String       @id @default(cuid())
  propertyId      String
  name            String
  symbol          String
  decimals        Int
  totalSupply     Int
  contractAddress String?
  deploymentTx    String?
  deploymentError String?
  blockchain      Blockchain   @default(SEPOLIA)
  isMinted        Boolean      @default(false)
  isActive        Boolean      @default(true)
  version         Int          @default(1)
  isTransferable  Boolean      @default(true)
  tokenUri        String?
  vestingStart    DateTime?
  vestingEnd      DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  investments     Investment[]
  property        Property     @relation(fields: [propertyId], references: [id])
}

model Investment {
  id            String           @id @default(cuid())
  investorId    String
  tokenId       String
  walletId      String?
  amount        Int
  pricePerToken Decimal
  totalValue    Decimal
  currency      String
  paymentMethod PaymentMethod    @default(CRYPTO)
  paymentRef    String?
  status        InvestmentStatus @default(PENDING)
  ipAddress     String?
  userAgent     String?
  kycVerifiedAt DateTime?
  isOnChain     Boolean          @default(false)
  metadata      Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  propertyId    String?
  investor      Investor         @relation(fields: [investorId], references: [id])
  property      Property?        @relation(fields: [propertyId], references: [id])
  token         Token            @relation(fields: [tokenId], references: [id])
  Wallet        Wallet?          @relation(fields: [walletId], references: [id])
}

model Client {
  id                String       @id @default(uuid())
  userId            String       @unique
  companyName       String
  country           String
  logoUrl           String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  contactEmail      String
  contactPhone      String
  legalEntityNumber String?
  status            ClientStatus @default(PENDING)
  walletAddress     String?
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties        Property[]
}

model KycRecord {
  id              String    @id @default(cuid())
  userId          String    @unique
  status          String    @default("PENDING")
  documentType    String?
  country         String?
  verifiedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  provider        String?
  referenceId     String?
  providerData    Json?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Visit {
  id         String   @id @default(cuid())
  propertyId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  referrer   String?
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  metadata  String?   // Stored as JSON string
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  readAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Blockchain {
  SEPOLIA
  POLYGON
  MAINNET
}

enum PaymentMethod {
  FIAT
  CRYPTO
}

enum InvestmentStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
  REFUNDED
}

enum ProjectStage {
  PLANNING
  UNDER_CONSTRUCTION
  COMPLETED
}

enum PropertyCategory {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  HOSPITALITY
  MIXED_USE
  OTHER
}

enum UserRole {
  INVESTOR
  CLIENT
  ADMIN
}

enum AuthProvider {
  GOOGLE
  AZURE
}

enum ClientStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PropertyStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

model Document {
  id           String    @id @default(cuid())
  propertyId   String?
  userId       String?
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  property     Property?  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user         User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ActionType {
  PROPERTY_CREATED
  PROPERTY_UPDATED
  PROPERTY_APPROVED
  PROPERTY_REJECTED
  INVESTMENT_CREATED
  INVESTMENT_CONFIRMED
  INVESTMENT_CANCELLED
  USER_CREATED
  USER_UPDATED
  KYC_SUBMITTED
  KYC_APPROVED
  KYC_REJECTED
  TOKEN_DEPLOYED
  WALLET_VERIFIED
  DOCUMENT_UPLOADED
  DOCUMENT_DELETED
}

model AuditLogEntry {
  id          String     @id @default(cuid())
  userId      String?
  actionType  ActionType
  entityType  String     // e.g. "Property", "Investment", "User"
  entityId    String?    // optional FK to specific record
  metadata    Json?
  createdAt   DateTime   @default(now())
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeatureFlag {
  key         String   @id                // unique flag key
  enabled     Boolean  @default(false)    // on/off
  description String?                     // human-friendly
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("sessions")
}
