
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  fullName: 'fullName',
  providerId: 'providerId',
  avatarUrl: 'avatarUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  lastLoginAt: 'lastLoginAt',
  phone: 'phone',
  preferredLanguage: 'preferredLanguage',
  role: 'role',
  timezone: 'timezone',
  authProvider: 'authProvider'
};

exports.Prisma.InvestorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  nationality: 'nationality',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  verificationMethod: 'verificationMethod',
  dateOfBirth: 'dateOfBirth',
  institutionName: 'institutionName',
  vatNumber: 'vatNumber',
  phoneNumber: 'phoneNumber',
  address: 'address',
  city: 'city',
  country: 'country',
  postalCode: 'postalCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  investorId: 'investorId',
  address: 'address',
  blockchain: 'blockchain',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  title: 'title',
  description: 'description',
  country: 'country',
  city: 'city',
  tokenPrice: 'tokenPrice',
  status: 'status',
  isFeatured: 'isFeatured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  address: 'address',
  apr: 'apr',
  imageUrls: 'imageUrls',
  irr: 'irr',
  minInvestment: 'minInvestment',
  tokenSymbol: 'tokenSymbol',
  tokensAvailablePercent: 'tokensAvailablePercent',
  totalPrice: 'totalPrice',
  valueGrowth: 'valueGrowth'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  name: 'name',
  symbol: 'symbol',
  decimals: 'decimals',
  totalSupply: 'totalSupply',
  contractAddress: 'contractAddress',
  deploymentTx: 'deploymentTx',
  deploymentError: 'deploymentError',
  blockchain: 'blockchain',
  isMinted: 'isMinted',
  isActive: 'isActive',
  version: 'version',
  isTransferable: 'isTransferable',
  tokenUri: 'tokenUri',
  vestingStart: 'vestingStart',
  vestingEnd: 'vestingEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvestmentScalarFieldEnum = {
  id: 'id',
  investorId: 'investorId',
  tokenId: 'tokenId',
  walletId: 'walletId',
  amount: 'amount',
  pricePerToken: 'pricePerToken',
  totalValue: 'totalValue',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  paymentRef: 'paymentRef',
  status: 'status',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  kycVerifiedAt: 'kycVerifiedAt',
  isOnChain: 'isOnChain',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  propertyId: 'propertyId'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  country: 'country',
  logoUrl: 'logoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  legalEntityNumber: 'legalEntityNumber',
  status: 'status',
  walletAddress: 'walletAddress'
};

exports.Prisma.KycRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  documentType: 'documentType',
  country: 'country',
  verifiedAt: 'verifiedAt',
  rejectedAt: 'rejectedAt',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  provider: 'provider',
  referenceId: 'referenceId',
  providerData: 'providerData'
};

exports.Prisma.VisitScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  metadata: 'metadata',
  isRead: 'isRead',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  userId: 'userId',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  path: 'path',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AuditLogEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  actionType: 'actionType',
  entityType: 'entityType',
  entityId: 'entityId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.FeatureFlagScalarFieldEnum = {
  key: 'key',
  enabled: 'enabled',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  INVESTOR: 'INVESTOR',
  CLIENT: 'CLIENT',
  ADMIN: 'ADMIN'
};

exports.AuthProvider = exports.$Enums.AuthProvider = {
  GOOGLE: 'GOOGLE',
  AZURE: 'AZURE'
};

exports.Blockchain = exports.$Enums.Blockchain = {
  SEPOLIA: 'SEPOLIA',
  POLYGON: 'POLYGON',
  MAINNET: 'MAINNET'
};

exports.PropertyStatus = exports.$Enums.PropertyStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  FIAT: 'FIAT',
  CRYPTO: 'CRYPTO'
};

exports.InvestmentStatus = exports.$Enums.InvestmentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.ClientStatus = exports.$Enums.ClientStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.ActionType = exports.$Enums.ActionType = {
  PROPERTY_CREATED: 'PROPERTY_CREATED',
  PROPERTY_UPDATED: 'PROPERTY_UPDATED',
  PROPERTY_APPROVED: 'PROPERTY_APPROVED',
  PROPERTY_REJECTED: 'PROPERTY_REJECTED',
  INVESTMENT_CREATED: 'INVESTMENT_CREATED',
  INVESTMENT_CONFIRMED: 'INVESTMENT_CONFIRMED',
  INVESTMENT_CANCELLED: 'INVESTMENT_CANCELLED',
  USER_CREATED: 'USER_CREATED',
  USER_UPDATED: 'USER_UPDATED',
  KYC_SUBMITTED: 'KYC_SUBMITTED',
  KYC_APPROVED: 'KYC_APPROVED',
  KYC_REJECTED: 'KYC_REJECTED',
  TOKEN_DEPLOYED: 'TOKEN_DEPLOYED',
  WALLET_VERIFIED: 'WALLET_VERIFIED',
  DOCUMENT_UPLOADED: 'DOCUMENT_UPLOADED',
  DOCUMENT_DELETED: 'DOCUMENT_DELETED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Investor: 'Investor',
  Wallet: 'Wallet',
  Property: 'Property',
  Token: 'Token',
  Investment: 'Investment',
  Client: 'Client',
  KycRecord: 'KycRecord',
  Visit: 'Visit',
  Notification: 'Notification',
  Document: 'Document',
  AuditLogEntry: 'AuditLogEntry',
  FeatureFlag: 'FeatureFlag'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
