---
applyTo: 'backend/src/modules/accounts/routes/user.routes.ts'
---

# Backend User Routes Instructions

**Location:** `accounts/routes/user.routes.ts`

## 🏗️ MANDATORY BACKEND ARCHITECTURE - ROUTES LAYER

Routes are **Layer 1** in the mandatory 7-layer backend architecture:

**🎯 ROUTES → Middleware → Validator → Controller → Services → Utils → Types**

### ✅ User Routes Responsibilities (Layer 1)

User routes define **API endpoints for user management**:

- **Profile endpoints** - user profile retrieval and updates
- **User management** - admin-level user operations
- **Handler assignment** - connect user routes to controller functions
- **Middleware attachment** - apply auth, validation, role checks

### ❌ What User Routes Should NOT Do

- **NO business logic** - controllers handle user processing
- **NO validation logic** - validators handle user data validation
- **NO authentication logic** - middleware handles auth
- **NO database access** - services handle all user Prisma operations
- **NO response formatting** - controllers format user responses

### 🔄 User Routes Pattern

```typescript
import { Router } from 'express';
import { userController } from '../controllers/user.controller';
import { authMiddleware, requireRole } from '../middleware/auth.middleware';
import { validateUserUpdate, validateUserCreate } from '../validators/user.validator';

const router = Router();

// ✅ User profile routes (authenticated users)
router.get('/profile', authMiddleware, userController.getCurrentUserProfile);
router.put('/profile', 
  authMiddleware, 
  validateUserUpdate, 
  userController.updateCurrentUserProfile
);

// ✅ User management routes (admin only)
router.get('/', 
  authMiddleware, 
  requireRole(['admin']), 
  userController.getAllUsers
);

router.get('/:id', 
  authMiddleware, 
  requireRole(['admin']), 
  userController.getUserById
);

router.put('/:id', 
  authMiddleware, 
  requireRole(['admin']), 
  validateUserUpdate,
  userController.updateUser
);

router.delete('/:id', 
  authMiddleware, 
  requireRole(['admin']), 
  userController.deleteUser
);

export default router;
```

### 📌 User Profile Routes Structure

Routes for user profile management:

```typescript
// Current user profile (self-service)
router.get('/profile', authMiddleware, userController.getCurrentUserProfile);
router.put('/profile', authMiddleware, validateUserUpdate, userController.updateCurrentUserProfile);
router.delete('/profile', authMiddleware, userController.deleteCurrentUser);

// Avatar/image management
router.post('/profile/avatar', 
  authMiddleware, 
  upload.single('avatar'),
  userController.uploadAvatar
);

// User preferences
router.get('/preferences', authMiddleware, userController.getUserPreferences);
router.put('/preferences', 
  authMiddleware, 
  validatePreferences, 
  userController.updateUserPreferences
);
```

### 🔐 Access Control Patterns

Different levels of access for user routes:

```typescript
// Self-service routes (user can manage their own data)
router.get('/profile', authMiddleware, userController.getCurrentUserProfile);

// Admin-only routes (user management)
router.get('/', authMiddleware, requireRole(['admin']), userController.getAllUsers);

// Manager+ routes (can view users in their organization)
router.get('/team', 
  authMiddleware, 
  requireRole(['manager', 'admin']), 
  userController.getTeamUsers
);

// Public routes (minimal user info, for directory purposes)
router.get('/:id/public', userController.getPublicUserProfile);
```

### 🎯 OAuth-Integrated User Management

Since the platform uses OAuth-only authentication:

```typescript
// OAuth user linking/unlinking
router.post('/oauth/link/:provider', 
  authMiddleware, 
  validateOAuthLink, 
  userController.linkOAuthProvider
);

router.delete('/oauth/unlink/:provider', 
  authMiddleware, 
  userController.unlinkOAuthProvider
);

// OAuth profile sync
router.post('/oauth/sync', 
  authMiddleware, 
  userController.syncOAuthProfile
);
```

### 🔄 User Data Routes

```typescript
// User search and filtering (admin)
router.get('/search', 
  authMiddleware, 
  requireRole(['admin']), 
  validateUserSearch,
  userController.searchUsers
);

// User activity and audit
router.get('/:id/activity', 
  authMiddleware, 
  requireRole(['admin']), 
  userController.getUserActivity
);

// Bulk user operations (admin)
router.post('/bulk/update', 
  authMiddleware, 
  requireRole(['admin']), 
  validateBulkUpdate,
  userController.bulkUpdateUsers
);
```

### ✅ Architecture Compliance Rules

1. **Endpoint Definition Only**: Routes just connect URLs to user controller methods
2. **No Business Logic**: All user logic belongs in user controllers and services
3. **Middleware Attachment**: Use auth middleware for user access control
4. **Handler Assignment**: Connect routes to appropriate user controller methods
5. **Clean Organization**: Group user routes by functionality

### 🧪 Development Considerations

For development environments:

- **Demo User Creation**: Fallback logic for creating demo users (dev only)
- **Seed Data**: Routes for seeding user test data (dev only)
- **Debug Endpoints**: Additional endpoints for testing (dev only)

**Important**: All development-specific routes must be disabled in production.

### 📁 Route Organization

User routes organized by access level and functionality:

```
/profile          - Current user profile management
/preferences      - User preferences and settings
/oauth/*          - OAuth provider management
/admin/users/*    - Admin user management
/search           - User search and discovery
```

### ✅ Security and Validation

- **Authentication Required**: All user routes require valid authentication
- **Role-Based Access**: Admin routes require appropriate permissions
- **Input Validation**: All user data updates must be validated
- **Rate Limiting**: Protect against abuse on user management endpoints
- **Audit Logging**: Track user management operations for security
