export declare function getInvestorById(id: string): Promise<({
    investments: ({
        token: {
            property: {
                id: string;
                address: string;
                city: string;
                country: string;
                createdAt: Date;
                updatedAt: Date;
                status: import(".prisma/client").$Enums.PropertyStatus;
                clientId: string;
                title: string;
                description: string;
                tokenPrice: import("@prisma/client/runtime/library").Decimal;
                isFeatured: boolean;
                apr: import("@prisma/client/runtime/library").Decimal;
                imageUrls: string[];
                irr: import("@prisma/client/runtime/library").Decimal;
                minInvestment: import("@prisma/client/runtime/library").Decimal;
                tokenSymbol: string;
                tokensAvailablePercent: import("@prisma/client/runtime/library").Decimal;
                totalPrice: import("@prisma/client/runtime/library").Decimal;
                valueGrowth: import("@prisma/client/runtime/library").Decimal;
            };
        } & {
            symbol: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            blockchain: import(".prisma/client").$Enums.Blockchain;
            propertyId: string;
            decimals: number;
            totalSupply: number;
            contractAddress: string | null;
            deploymentTx: string | null;
            deploymentError: string | null;
            isMinted: boolean;
            isActive: boolean;
            version: number;
            isTransferable: boolean;
            tokenUri: string | null;
            vestingStart: Date | null;
            vestingEnd: Date | null;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        investorId: string;
        status: import(".prisma/client").$Enums.InvestmentStatus;
        currency: string;
        propertyId: string | null;
        tokenId: string;
        walletId: string | null;
        amount: number;
        pricePerToken: import("@prisma/client/runtime/library").Decimal;
        totalValue: import("@prisma/client/runtime/library").Decimal;
        paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
        paymentRef: string | null;
        ipAddress: string | null;
        userAgent: string | null;
        kycVerifiedAt: Date | null;
        isOnChain: boolean;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
    })[];
    user: {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        fullName: string;
        providerId: string;
        avatarUrl: string | null;
        deletedAt: Date | null;
        phone: string | null;
        preferredLanguage: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        timezone: string | null;
        authProvider: import(".prisma/client").$Enums.AuthProvider;
    };
    wallets: {
        id: string;
        userId: string | null;
        isVerified: boolean;
        verifiedAt: Date | null;
        address: string;
        createdAt: Date;
        updatedAt: Date;
        investorId: string;
        blockchain: import(".prisma/client").$Enums.Blockchain;
    }[];
} & {
    id: string;
    userId: string;
    nationality: string;
    isVerified: boolean;
    verifiedAt: Date | null;
    verificationMethod: string | null;
    dateOfBirth: Date | null;
    institutionName: string | null;
    vatNumber: string | null;
    phoneNumber: string | null;
    address: string | null;
    city: string | null;
    country: string | null;
    postalCode: string | null;
    createdAt: Date;
    updatedAt: Date;
}) | null>;
//# sourceMappingURL=InvestorService.d.ts.map