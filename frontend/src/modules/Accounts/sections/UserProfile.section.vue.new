<template>
  <div class="user-profile-section">
    <!-- Layer 2: Section handles UI coordination and component orchestration -->
    
    <!-- Mode switcher for admins -->
    <div v-if="showModeSwitch" class="mb-4 flex space-x-2">
      <button 
        @click="$emit('mode-change', 'profile')"
        class="px-4 py-2 rounded-md"
        :class="currentMode === 'profile' ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700'"
      >
        Profile
      </button>
      <button 
        @click="$emit('mode-change', 'settings')"
        class="px-4 py-2 rounded-md"
        :class="currentMode === 'settings' ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700'"
      >
        Settings
      </button>
    </div>

    <!-- Loading state -->
    <div v-if="isLoading" class="flex justify-center items-center py-12">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
    </div>

    <!-- Error state -->
    <div v-else-if="error" class="bg-red-50 border border-red-200 rounded-md p-4 mb-4">
      <div class="flex">
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">Error</h3>
          <div class="mt-2 text-sm text-red-700">{{ error }}</div>
        </div>
      </div>
    </div>

    <!-- Profile content -->
    <UserComponent 
      v-else-if="user"
      :user="user"
      :editable="editable"
      :loading="loading"
      @update="handleUpdate"
      @edit-toggle="handleEditToggle"
    />
  </div>
</template>

<script setup lang="ts">
import { computed, onMounted } from 'vue';
import { useUserStore } from '../stores/user.store';
import { useUserComposable } from '../composables/useUser';
import UserComponent from '../components/UserComponent.vue';
import type { UserProfile } from '../types/user.types';

// Layer 2 Responsibilities: UI coordination, component orchestration, store access

interface Props {
  userId?: string;
  editable?: boolean;
  showModeSwitch?: boolean;
}

const props = withDefaults(defineProps<Props>(), {
  editable: false,
  showModeSwitch: false
});

const emit = defineEmits<{
  'mode-change': [mode: 'profile' | 'settings'];
  'profile-updated': [profile: UserProfile];
  'error': [error: string];
}>();

// Layer 3 access: Stores and Composables
const userStore = useUserStore();
const { loading, error } = useUserComposable();

// Computed properties for section coordination
const user = computed(() => {
  if (props.userId) {
    return userStore.getUserById(props.userId);
  }
  return userStore.currentUser;
});

const isLoading = computed(() => loading.value || userStore.isLoading);
const currentMode = computed(() => 'profile'); // Current mode tracking

// Section coordination methods (Layer 2 responsibility)
const handleUpdate = async (profileData: Partial<UserProfile>) => {
  try {
    if (props.userId) {
      await userStore.updateUserProfile(props.userId, profileData);
    } else {
      await userStore.updateCurrentUserProfile(profileData);
    }
    
    const updatedUser = user.value;
    if (updatedUser) {
      emit('profile-updated', updatedUser as UserProfile);
    }
  } catch (err) {
    const errorMessage = err instanceof Error ? err.message : 'Failed to update profile';
    emit('error', errorMessage);
  }
};

const handleEditToggle = (isEditing: boolean) => {
  // Layer 2: Handle edit state coordination
  console.log('Edit mode toggled:', isEditing);
};

// Initialize section data
onMounted(async () => {
  if (props.userId && !user.value) {
    try {
      await userStore.fetchUser(props.userId);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch user';
      emit('error', errorMessage);
    }
  }
});
</script>

<style scoped>
.user-profile-section {
  background: white;
  border-radius: 0.5rem;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  padding: 1.5rem;
}
</style>
