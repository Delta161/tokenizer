<template>
  <div class="user-view">
    <!-- Layer 1: View only handles routing and section coordination -->
    <UserProfileSection 
      v-if="currentMode === 'profile'"
      :user-id="viewingUserId"
      :editable="isEditable"
      :show-mode-switch="authStore.isAdmin"
      @mode-change="handleModeChange"
      @profile-updated="handleProfileUpdate"
      @error="handleError"
    />
    
    <UserSettingsSection
      v-else-if="currentMode === 'settings'"
      :user-id="viewingUserId"
      @mode-change="handleModeChange"
      @settings-updated="handleSettingsUpdate"
      @error="handleError"
    />
  </div>
</template>

<script setup lang="ts">
import { computed, ref, onMounted } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import { useAuthStore } from '../stores/auth.store';
import UserProfileSection from '../sections/UserProfile.section.vue';
import UserSettingsSection from '../sections/UserSettings.section.vue';
import type { UserProfile, UserSettings } from '../types/user.types';

// Layer 1 Responsibilities: Route handling and page coordination only
const route = useRoute();
const router = useRouter();
const authStore = useAuthStore();

// Route-based state
const currentMode = ref<'profile' | 'settings'>('profile');

// Computed route parameters
const viewingUserId = computed(() => {
  const idParam = route.params.id;
  return typeof idParam === 'string' ? idParam : undefined;
});

const isEditable = computed(() => {
  // Current user can edit their own profile, admins can edit any profile
  return !viewingUserId.value || authStore.isAdmin;
});

// Page coordination methods (Layer 1 responsibility)
const handleModeChange = (mode: 'profile' | 'settings') => {
  currentMode.value = mode;
  
  // Update route query
  router.push({
    ...route,
    query: {
      ...route.query,
      mode
    }
  });
};

const handleProfileUpdate = (profile: UserProfile) => {
  // Layer 1: Coordinate page-level navigation after updates
  if (viewingUserId.value && authStore.isAdmin) {
    router.push('/admin/users');
  } else {
    // Show success message or navigate
    router.push('/profile/success');
  }
};

const handleSettingsUpdate = (settings: UserSettings) => {
  // Layer 1: Handle settings update navigation
  currentMode.value = 'profile';
  router.push({ ...route, query: { ...route.query, mode: 'profile' } });
};

const handleError = (error: string) => {
  // Layer 1: Handle page-level errors
  console.error('Page error:', error);
  // Could show page-level error notification
};

// Initialize mode from route
onMounted(() => {
  const routeMode = route.query.mode as string;
  if (routeMode === 'settings') {
    currentMode.value = 'settings';
  }
});
</script>

<style scoped>
.user-view {
  min-height: 100vh;
}
</style>
