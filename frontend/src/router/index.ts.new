import { createRouter, createWebHistory } from 'vue-router'
import { useAuthStore } from '../modules/Auth/store'

// Import module routes
import { authRoutes } from '../modules/Auth/views'
import { userRoutes } from '../modules/User/views'

// Import layouts
const DefaultLayout = () => import('../layouts/DefaultLayout.vue')
const AuthLayout = () => import('../layouts/AuthLayout.vue')

// Import views
const HomeView = () => import('../views/HomeView.vue')
const DashboardView = () => import('../views/DashboardView.vue')
const NotFoundView = () => import('../views/NotFoundView.vue')

// Create router instance
const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    // Home route
    {
      path: '/',
      name: 'home',
      component: HomeView,
      meta: {
        requiresAuth: false,
        layout: 'DefaultLayout'
      }
    },
    
    // Dashboard route
    {
      path: '/dashboard',
      name: 'dashboard',
      component: DashboardView,
      meta: {
        requiresAuth: true,
        layout: 'DefaultLayout'
      }
    },
    
    // Auth module routes
    ...authRoutes,
    
    // User module routes
    ...userRoutes,
    
    // 404 route
    {
      path: '/:pathMatch(.*)*',
      name: 'not-found',
      component: NotFoundView,
      meta: {
        requiresAuth: false,
        layout: 'DefaultLayout'
      }
    }
  ]
})

// Navigation guard
router.beforeEach(async (to, from, next) => {
  // Check if route requires authentication
  const requiresAuth = to.matched.some(record => record.meta.requiresAuth)
  
  // Get auth store
  const authStore = useAuthStore()
  
  // Check if user is authenticated
  let isAuthenticated = authStore.isAuthenticated
  
  // If not authenticated but has token, try to validate it
  if (!isAuthenticated && localStorage.getItem('token')) {
    try {
      await authStore.checkAuth()
      isAuthenticated = authStore.isAuthenticated
    } catch (error) {
      // Token is invalid, clear it
      localStorage.removeItem('token')
    }
  }
  
  // Check if route requires specific role
  const requiresRole = to.matched.some(record => record.meta.requiresRole) 
    ? to.matched.find(record => record.meta.requiresRole)?.meta.requiresRole 
    : null
  
  // Handle authentication and role requirements
  if (requiresAuth && !isAuthenticated) {
    // Redirect to login if authentication is required but user is not authenticated
    next({ name: 'login', query: { redirect: to.fullPath } })
  } else if (requiresRole && isAuthenticated) {
    // Check if user has required role
    const hasRequiredRole = Array.isArray(requiresRole) 
      ? requiresRole.includes(authStore.userRole)
      : authStore.userRole === requiresRole
    
    if (!hasRequiredRole) {
      // Redirect to dashboard if user doesn't have required role
      next({ name: 'dashboard' })
    } else {
      next()
    }
  } else {
    // Continue navigation
    next()
  }
})

// Layout handling
router.beforeResolve((to, from, next) => {
  // Get layout from route meta
  const layout = to.meta.layout || 'DefaultLayout'
  
  // Set layout component
  let layoutComponent
  switch (layout) {
    case 'AuthLayout':
      layoutComponent = AuthLayout
      break
    case 'DefaultLayout':
    default:
      layoutComponent = DefaultLayout
      break
  }
  
  // Set layout component on route meta
  to.meta.layoutComponent = layoutComponent
  
  next()
})

export default router